-- Top level stuff
PDefs.  Program     ::= [Def] ;

--    token PostProcDir ('#' char*) ;
-- PProc.      PPD     ::= PostProcDir ;

terminator Def "" ;

-- Comments

    comment "//" ;
    comment "/*" "*/" ;
    comment "#" ;           -- Treat pre-processor directives as comments and ignore them

-- Functions
DFun.       Def     ::= Type Id Arglist FBody ;
AList.      Arglist ::= "(" [Arg] ")" ;
SEmpty.     FBody   ::= ";" ;
SList.      FBody   ::= "{" [Stm] "}" ;
ADecl.      Arg     ::= Type Id ;

    separator   Arg "," ;
    terminator  Stm "" ;

-- Statements
SExp.       Stm     ::= Exp ";" ;
SDecl.      Stm     ::= Type Id "," [Id] ";" ;
SInit.      Stm     ::= Type Id "=" Exp ";" ;
SReturn.    Stm     ::= "return" Exp ";" ;
SWhile.     Stm     ::= "while" "(" Exp ")" Stm ;
SBlock.     Stm     ::= "{" [Stm] "}" ;
SIfElse.    Stm     ::= "if" "(" Exp ")" Stm "else" Stm ;

-- Expressions
EInt.       Exp16   ::= Integer ;
EDouble.    Exp16   ::= Double ;
EString.    Exp16   ::= String ;
ETrue.      Exp16   ::= "true" ;
EFalse.     Exp16   ::= "false" ;   
EQualC.     Exp16   ::= [Id] ;

ECall.      Exp15   ::= Id "(" [Exp] ")" ;

EPIncr.     Exp14   ::= Exp15 "++" ;
EPDecr.     Exp14   ::= Exp15 "--" ;

EIncr.      Exp13   ::= "++" Exp14 ;
EDecr.      Exp13   ::= "--" Exp14 ;
ENeg.       Exp13   ::= "-" Exp14 ;

EMul.       Exp12   ::= Exp12 "*" Exp13 ;
EDiv.       Exp12   ::= Exp12 "/" Exp13 ;

EAdd.       Exp11   ::= Exp11 "+" Exp12 ;
Esub.       Exp11   ::= Exp11 "-" Exp12 ;

ERShift.    Exp10   ::= Exp10 "<<" Exp11 ;
ELShift.    Exp10   ::= Exp10 ">>" Exp11 ;

ELt.        Exp9    ::= Exp9 "<" Exp10 ;
EGt.        Exp9    ::= Exp9 ">" Exp10 ;
ELEq.       Exp9    ::= Exp9 "<=" Exp10 ;
EGEq.       Exp9    ::= Exp9 ">=" Exp10 ;

EEq.        Exp8    ::= Exp8 "==" Exp9 ;
ENEq.       Exp8    ::= Exp8 "!=" Exp9 ;

EAnd.       Exp4    ::= Exp4 "&&" Exp5 ;
EOr.        Exp3    ::= Exp3 "||" Exp4 ;

EAss.       Exp2    ::= Exp3 "=" Exp2 ;

    separator nonempty Id "::" ;
    coercions Exp 15 ;
    separator Exp "," ;

-- Types
Tbool.      Type    ::= "bool" ;
Tdouble.    Type    ::= "double" ;
Tint.       Type    ::= "int" ;
Tstring.    Type    ::= "string" ;
Tvoid.      Type    ::= "void" ;
TQualC.     Type    ::= [Id] ;

    token Id (letter (letter | digit | '_')*) ;

