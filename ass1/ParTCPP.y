-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParTCPP where
import AbsTCPP
import LexTCPP
import ErrM

}

%name pProgram Program
%name pListDef ListDef
%name pDef Def
%name pArglist Arglist
%name pFBody FBody
%name pArg Arg
%name pListArg ListArg
%name pListStm ListStm
%name pStm Stm
%name pExp16 Exp16
%name pExp10 Exp10
%name pListId ListId
%name pExp Exp
%name pExp1 Exp1
%name pExp2 Exp2
%name pExp3 Exp3
%name pExp4 Exp4
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp8 Exp8
%name pExp9 Exp9
%name pExp11 Exp11
%name pExp12 Exp12
%name pExp13 Exp13
%name pExp14 Exp14
%name pExp15 Exp15
%name pListExp ListExp
%name pType Type
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ',' { PT _ (TS _ 3) }
  '::' { PT _ (TS _ 4) }
  ';' { PT _ (TS _ 5) }
  '<<' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '>>' { PT _ (TS _ 8) }
  'bool' { PT _ (TS _ 9) }
  'double' { PT _ (TS _ 10) }
  'int' { PT _ (TS _ 11) }
  'return' { PT _ (TS _ 12) }
  'string' { PT _ (TS _ 13) }
  'void' { PT _ (TS _ 14) }
  '{' { PT _ (TS _ 15) }
  '}' { PT _ (TS _ 16) }

L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_quoted { PT _ (TL $$) }
L_Id { PT _ (T_Id $$) }


%%

Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
String  :: { String }  : L_quoted {  $1 }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsTCPP.PDefs (reverse $1) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Def :: { Def }
Def : Type Id Arglist FBody { AbsTCPP.DFun $1 $2 $3 $4 }
Arglist :: { Arglist }
Arglist : '(' ListArg ')' { AbsTCPP.AList $2 }
FBody :: { FBody }
FBody : ';' { AbsTCPP.SEmpty }
      | '{' ListStm '}' { AbsTCPP.SList (reverse $2) }
Arg :: { Arg }
Arg : Type Id { AbsTCPP.ADecl $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Stm :: { Stm }
Stm : Type Id '=' Exp ';' { AbsTCPP.SInit $1 $2 $4 }
    | 'return' Exp ';' { AbsTCPP.SReturn $2 }
Exp16 :: { Exp }
Exp16 : Integer { AbsTCPP.EInt $1 }
      | Double { AbsTCPP.EDouble $1 }
      | String { AbsTCPP.EString $1 }
      | ListId { AbsTCPP.EQualC $1 }
Exp10 :: { Exp }
Exp10 : Exp10 '<<' Exp11 { AbsTCPP.ERShift $1 $3 }
      | Exp10 '>>' Exp11 { AbsTCPP.ELShift $1 $3 }
      | Exp11 { $1 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id '::' ListId { (:) $1 $3 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 { $1 }
Exp3 :: { Exp }
Exp3 : Exp4 { $1 }
Exp4 :: { Exp }
Exp4 : Exp5 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Exp8 :: { Exp }
Exp8 : Exp9 { $1 }
Exp9 :: { Exp }
Exp9 : Exp10 { $1 }
Exp11 :: { Exp }
Exp11 : Exp12 { $1 }
Exp12 :: { Exp }
Exp12 : Exp13 { $1 }
Exp13 :: { Exp }
Exp13 : Exp14 { $1 }
Exp14 :: { Exp }
Exp14 : Exp15 { $1 }
Exp15 :: { Exp }
Exp15 : '(' Exp ')' { $2 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'bool' { AbsTCPP.Tbool }
     | 'double' { AbsTCPP.Tdouble }
     | 'int' { AbsTCPP.Tint }
     | 'string' { AbsTCPP.Tstring }
     | 'void' { AbsTCPP.Tvoid }
     | ListId { AbsTCPP.TQualC $1 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

