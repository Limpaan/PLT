

module AbsCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def
    = DUsing [Id]
    | DTypeDef TDefStm
    | DFun Type Id Arglist FBody
    | DArg Arg
  deriving (Eq, Ord, Show, Read)

data Arglist = AList [Arg]
  deriving (Eq, Ord, Show, Read)

data FBody = SEmpty | SList [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = Argum Type ArgDecl | ArgumCons Type ArgDecl
  deriving (Eq, Ord, Show, Read)

data ArgDecl = AEmpty | AIdent Id | AInit Id Exp
  deriving (Eq, Ord, Show, Read)

data Stm
    = SExp Exp
    | SDecl Type [Var]
    | SDeclCons Type [Var]
    | SReturn Exp
    | SWhile Exp Stm
    | SDoWhile Stm Exp
    | SFor Arg Exp Exp Stm
    | SBlock [Stm]
    | SIf Exp Stm
    | SIfElse Exp Stm Stm
    | STypeDef TDefStm
  deriving (Eq, Ord, Show, Read)

data TDefStm = TypeDef Type Id
  deriving (Eq, Ord, Show, Read)

data Var = VDecl Id | VInit Id Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = ELit Lit
    | EQualC [Id]
    | EIndex Exp Exp
    | ECall Exp [Exp]
    | EProj1 Exp Exp
    | EProj2 Exp Exp
    | EPIncr Exp
    | EPDecr Exp
    | EIncr Exp
    | EDecr Exp
    | EDeref Exp
    | ENeg Exp
    | EMul Exp Exp
    | EDiv Exp Exp
    | ERem Exp Exp
    | EAdd Exp Exp
    | Esub Exp Exp
    | ERShift Exp Exp
    | ELShift Exp Exp
    | ELt Exp Exp
    | EGt Exp Exp
    | ELEq Exp Exp
    | EGEq Exp Exp
    | EEq Exp Exp
    | ENEq Exp Exp
    | EAnd Exp Exp
    | EOr Exp Exp
    | EAss Exp Exp
    | EPAss Exp Exp
    | EMAss Exp Exp
    | ECond Exp Exp Exp
    | EExcep Exp
  deriving (Eq, Ord, Show, Read)

data Type
    = Tint | Tbool | Tchar | Tdouble | Tvoid | TQualC [Id] | TRef Type
  deriving (Eq, Ord, Show, Read)

data Lit
    = LInt Integer | LDouble Double | LChar Char | LString [String]
  deriving (Eq, Ord, Show, Read)

