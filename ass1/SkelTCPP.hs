module SkelTCPP where

-- Haskell module generated by the BNF converter

import AbsTCPP
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transId :: Id -> Result
transId x = case x of
  Id string -> failure x
transProgram :: Program -> Result
transProgram x = case x of
  PDefs defs -> failure x
transDef :: Def -> Result
transDef x = case x of
  DFun type_ id arglist fbody -> failure x
transArglist :: Arglist -> Result
transArglist x = case x of
  AList args -> failure x
transFBody :: FBody -> Result
transFBody x = case x of
  SEmpty -> failure x
  SList stms -> failure x
transArg :: Arg -> Result
transArg x = case x of
  ADecl type_ id -> failure x
transStm :: Stm -> Result
transStm x = case x of
  SInit type_ id exp -> failure x
  SReturn exp -> failure x
transExp :: Exp -> Result
transExp x = case x of
  EInt integer -> failure x
  EDouble double -> failure x
  EString string -> failure x
  EQualC ids -> failure x
  ERShift exp1 exp2 -> failure x
  ELShift exp1 exp2 -> failure x
transType :: Type -> Result
transType x = case x of
  Tbool -> failure x
  Tdouble -> failure x
  Tint -> failure x
  Tstring -> failure x
  Tvoid -> failure x
  TQualC ids -> failure x

