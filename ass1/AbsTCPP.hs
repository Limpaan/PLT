

module AbsTCPP where

-- Haskell module generated by the BNF converter




newtype Id = Id String deriving (Eq, Ord, Show, Read)
data Program = PDefs [Def]
  deriving (Eq, Ord, Show, Read)

data Def = DFun Type Id Arglist FBody
  deriving (Eq, Ord, Show, Read)

data Arglist = AList [Arg]
  deriving (Eq, Ord, Show, Read)

data FBody = SEmpty | SList [Stm]
  deriving (Eq, Ord, Show, Read)

data Arg = ADecl Type Id
  deriving (Eq, Ord, Show, Read)

data Stm = SInit Type Id Exp | SReturn Exp
  deriving (Eq, Ord, Show, Read)

data Exp
    = EInt Integer
    | EDouble Double
    | EString String
    | EQualC [Id]
    | ERShift Exp Exp
    | ELShift Exp Exp
  deriving (Eq, Ord, Show, Read)

data Type = Tbool | Tdouble | Tint | Tstring | Tvoid | TQualC [Id]
  deriving (Eq, Ord, Show, Read)

